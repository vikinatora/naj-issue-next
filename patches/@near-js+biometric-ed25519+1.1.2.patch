diff --git a/node_modules/@near-js/biometric-ed25519/lib/index.js b/node_modules/@near-js/biometric-ed25519/lib/index.js
index 29788a0..8879c0a 100644
--- a/node_modules/@near-js/biometric-ed25519/lib/index.js
+++ b/node_modules/@near-js/biometric-ed25519/lib/index.js
@@ -17,7 +17,7 @@ const base64_1 = __importDefault(require("@hexagon/base64"));
 const ed25519_1 = require("@noble/curves/ed25519");
 const sha256_1 = require("@noble/hashes/sha256");
 const buffer_1 = require("buffer");
-const asn1_parser_1 = __importDefault(require("asn1-parser"));
+const asn1js_1 = __importDefault(require("@lapo/asn1js"));
 const crypto_1 = require("@near-js/crypto");
 const utils_1 = require("@near-js/utils");
 const utils_2 = require("./utils");
@@ -87,18 +87,31 @@ const getKeys = (username) => __awaiter(void 0, void 0, void 0, function* () {
     setBufferIfUndefined();
     return navigator.credentials.get({ publicKey })
         .then((response) => __awaiter(void 0, void 0, void 0, function* () {
-        var _a, _b;
         const getAssertionResponse = (0, utils_2.publicKeyCredentialToJSON)(response);
         const signature = base64_1.default.toArrayBuffer(getAssertionResponse.response.signature, true);
-        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
-        //@ts-ignore
-        const parser = ((_a = asn1_parser_1.default === null || asn1_parser_1.default === void 0 ? void 0 : asn1_parser_1.default.ASN1) === null || _a === void 0 ? void 0 : _a.parse) || ((_b = window === null || window === void 0 ? void 0 : window.ASN1) === null || _b === void 0 ? void 0 : _b.parse);
-        const rAndS = parser(new Uint8Array(signature));
+        console.log("Signature: ");
+        console.log(signature);
+        const rAndS = asn1js_1.default.decode(new Uint8Array(signature), 0);
+        console.log("rAndS: ");
+        console.log(rAndS);
+        console.log("To string: ");
+        console.log(rAndS.toString());
+        console.log("To pretty string: ");
+        console.log(rAndS.toPrettyString());
+        const rObj = rAndS.sub[0];
+        const rStart = rObj.posContent();
+        const rEnd = rStart + rObj.length;
+        const r = rObj.stream.enc.slice(rStart, rEnd);
+
+        const sObj = rAndS.sub[1];
+        const sStart = sObj.posContent();
+        const sEnd = sStart + sObj.length;
+        const s = sObj.stream.enc.slice(sStart, sEnd);
+        console.log("r: " + r)
+        console.log("s: " + s)
         const clientDataJSONHash = sha256_1.sha256.create().update(buffer_1.Buffer.from(new Uint8Array(base64_1.default.toArrayBuffer(getAssertionResponse.response.clientDataJSON, true)))).digest();
         const authenticatorDataJSONHash = buffer_1.Buffer.from(new Uint8Array(base64_1.default.toArrayBuffer(getAssertionResponse.response.authenticatorData, true)));
         const authenticatorAndClientDataJSONHash = buffer_1.Buffer.concat([buffer_1.Buffer.from(authenticatorDataJSONHash), buffer_1.Buffer.from(clientDataJSONHash)]);
-        const r = rAndS.children[0].value;
-        const s = rAndS.children[1].value;
         const correctPKs = yield (0, utils_2.recoverPublicKey)((0, utils_2.uint8ArrayToBigInt)(r), (0, utils_2.uint8ArrayToBigInt)(s), authenticatorAndClientDataJSONHash, 0);
         const firstEDSecret = sha256_1.sha256.create().update(buffer_1.Buffer.from(correctPKs[0])).digest();
         const firstEDPublic = ed25519_1.ed25519.getPublicKey(firstEDSecret);
@@ -112,7 +125,7 @@ const getKeys = (username) => __awaiter(void 0, void 0, void 0, function* () {
 exports.getKeys = getKeys;
 // To check if current browser supports WebAuthn
 const isPassKeyAvailable = () => __awaiter(void 0, void 0, void 0, function* () {
-    var _c, _d;
-    return ((_d = (_c = window.PublicKeyCredential) === null || _c === void 0 ? void 0 : _c.isUserVerifyingPlatformAuthenticatorAvailable) === null || _d === void 0 ? void 0 : _d.call(_c)) || false;
+    var _a, _b;
+    return ((_b = (_a = window.PublicKeyCredential) === null || _a === void 0 ? void 0 : _a.isUserVerifyingPlatformAuthenticatorAvailable) === null || _b === void 0 ? void 0 : _b.call(_a)) || false;
 });
 exports.isPassKeyAvailable = isPassKeyAvailable;
